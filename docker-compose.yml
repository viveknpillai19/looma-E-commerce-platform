# docker-compose file version
version: '3.8'

# Define all the services (containers) we need
services:

  # 1. Our PostgreSQL Database Service
  postgres-db:
    image: postgres:14-alpine # Use the official PostgreSQL 14 image
    container_name: looma-postgres
    ports:
      - "5432:5432" # Map port 5432 on our machine to 5432 in the container
    environment:
      # Set credentials for the database. Our Spring app will use these.
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=looma_db
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data even if container is removed

  # 2. Our MongoDB Database Service
  mongo-db:
    image: mongo:latest # Use the latest official MongoDB image
    container_name: looma-mongo
    ports:
      - "27017:27017" # Map default MongoDB port
    environment:
      # Set credentials for MongoDB
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo_data:/data/db # Persist MongoDB data

  # 3. Our Spring Boot Application Service
  backend-app:
    build: ./backend # Tell docker-compose to build the image from the Dockerfile in the ./backend directory
    container_name: looma-backend-app
    ports:
      - "8080:8080"
    environment:
      # Pass database connection details to our Spring Boot app
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/looma_db
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_DATA_MONGODB_URI=mongodb://admin:password@mongo-db:27017/looma_product_db?authSource=admin
    depends_on:
      - postgres-db # Tell this service to wait until the postgres-db service is running
      - mongo-db    # Wait for mongo-db as well

# Define the volumes for data persistence
volumes:
  postgres_data:
  mongo_data: